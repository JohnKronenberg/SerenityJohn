<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>groupInfo</key>
	<dict>
		<key>expandAfterMode</key>
		<integer>2</integer>
		<key>groupName</key>
		<string>Tools</string>
	</dict>
	<key>snippetsTE2</key>
	<array>
		<dict>
			<key>abbreviation</key>
			<string>,,eub</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2012-08-09T11:54:19Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Expand URL (bit.ly)</string>
			<key>lastUsed</key>
			<date>2012-08-29T09:35:02Z</date>
			<key>modificationDate</key>
			<date>2012-08-29T09:37:50Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/ruby
# Bit.ly shortener TextExpander Snippet by Brett Terpstra
# Working as of June, 2012 but APIs are a'changin
# Create snippets for username (shortcut: #btlyu) and API key (shortcut: #btlya)
# Find your API key at http://bit.ly/a/your_api_key

require 'open-uri'
require 'cgi'

def entity_escape(text)
  text.gsub(/&amp;(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)/, '&amp;amp;')
end

def make_link(text)
  case text
  when %r{\Ahttps?://.*?\.\w{2,4}.*?\z}:
    entity_escape(text)
  when %r{\A(www\..*|.*\.\w{2,4})\z}:
    "http://#{entity_escape text}"
  when %r{\A.*?\.\w{2,4}\/?.*\z}:
    "http://#{entity_escape text}"
  else
    nil
  end
end

USER_NAME = '%snippet:#btlyu%' # Your login name
API_KEY = '%snippet:#btlya%'
url = make_link %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip

res = open("http://api.bit.ly/v3/expand?login=#{USER_NAME}&amp;apiKey=#{API_KEY}&amp;shortUrl=#{CGI.escape(url)}&amp;format=txt").read unless url.nil?

begin
  print res unless res.nil?
rescue
  exit
end</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>1</integer>
			<key>uuidString</key>
			<string>2CF17848-A16E-4EA8-9437-C43053D910BD</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,cul</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2011-12-07T11:21:52Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Clipboard -&gt; UL</string>
			<key>lastUsed</key>
			<date>2012-06-29T18:43:28Z</date>
			<key>modificationDate</key>
			<date>2011-12-19T14:04:54Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/ruby

# ruby script to make an unordered list from indented data.

data = %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip

result = "&lt;ul&gt;\n"
last_marker = []
last_marker[0] = ""

last_leading_space = ""
g_tab_width = 4
g_list_level = 0
last_list_level = 0

marker = item = leading_space = ''

data.split("\n").each {|line|
  next if line =~ /^[\s\t]*$/
  parts = line.match(/^([\t ]*)(\d+\. |[\*\+\-] )?\s*(.*)/)
  leading_space = parts[1]
  marker = parts[2]
  item = parts[3]
  leading_space.gsub!(/\t/,'    ')

  if leading_space.length &gt; last_leading_space.length + 3
    last_list_level = g_list_level
    g_list_level += 1
    last_leading_space = leading_space
    last_list_level = g_list_level
    result += "&lt;ul&gt;\n"
  elsif leading_space.length + 3 &lt; last_leading_space.length
    g_list_level = leading_space.length / 4
    last_leading_space = leading_space
    g_list_level-last_list_level.times do
      result += "&lt;/ul&gt;\n"
    end
    last_list_level = g_list_level
  end
  indent = ""

  result += "&lt;li&gt;#{item}&lt;/li&gt;\n"
}

puts result + "&lt;/ul&gt;"
</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>5</integer>
			<key>uuidString</key>
			<string>1BA1340B-DDD7-4C56-870F-0220117FA62C</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,mad</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2011-10-15T05:44:20Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Make a date</string>
			<key>lastUsed</key>
			<date>2012-06-29T18:41:54Z</date>
			<key>modificationDate</key>
			<date>2013-01-19T00:34:40Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env php
&lt;?php
$input = "%fill:Date string%";
// mon, tue, next fri, tomorrow 3pm...
// 1, 3, -2 (days), 30 minutes...
// avoid "on" and "at", keep it simple.





date_default_timezone_set("America/Chicago");
$dateformat = "l, M jS, Y";
$timeformat = " \a\\t g:ia";
$debug = 2;

if ( preg_match( "/^([+-])?(\d+)$/", trim($input), $matches ) )
{
  $input = $matches[2] . " days";
  if ($matches[1] == "-") $input .= " ago";
}
else if ( preg_match("/([ap]m|noon|midnight|hours|minutes)/i",trim($input),$matches) )
{
  $dateformat .= $timeformat;
}

if (($timestamp = strtotime("$input")) === false)
{
  if($debug &gt; 1)
    `/usr/local/bin/growlnotify -a TextExpander -t "Natural language FAIL" -m "I can't understand you when you mumble"`;
  if ($debug &gt; 0)
	die('Derp');
}
else
{
  echo date($dateformat,$timestamp);
}</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>8</integer>
			<key>uuidString</key>
			<string>D324D336-6DEE-4F3F-8659-149F253B7C1A</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,avg</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2011-09-02T03:14:39Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Average numbers in clipboard</string>
			<key>lastUsed</key>
			<date>2012-06-29T18:48:04Z</date>
			<key>modificationDate</key>
			<date>2011-12-07T14:00:27Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env ruby

def ts( number )
  number.to_s.reverse.scan(/(?:\d*\.)?\d{1,3}-?/).join(',').reverse
end

def do_average(text)
  arr = text.scan(/\.?\d[\d,]+(?:\.\d+)?/).map{|line|
    line.gsub(/[^\d\.]/,'').to_f
  }.sort

  return ts(arr.inject(0.0) { |sum,el| sum + el } / arr.size ) unless arr.empty?
end


print do_average %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>2</integer>
			<key>uuidString</key>
			<string>64A8B887-961C-4693-934A-F7AED6976283</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,-</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-04-30T03:59:07Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Hyphenate clipboard</string>
			<key>lastUsed</key>
			<date>2012-06-29T19:31:58Z</date>
			<key>modificationDate</key>
			<date>2012-06-29T19:32:08Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/ruby

clip = %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}
print clip.gsub(/\b\s\b/,'-')</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>22</integer>
			<key>uuidString</key>
			<string>C69FBE87-4B9E-4BAD-A6DB-7D776A0BA1C3</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,dummy</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-08-03T18:45:58Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Dummy Image</string>
			<key>lastUsed</key>
			<date>2012-06-29T18:45:41Z</date>
			<key>modificationDate</key>
			<date>2012-06-29T18:46:16Z</date>
			<key>plainText</key>
			<string>&lt;img src="http://placehold.it/%fill:width%x%fill:height%/333333/dddddd&amp;text=%fill:title%" alt="%fill:title%" width="%fill:width%" height="%fill:height%" /&gt;</string>
			<key>snippetType</key>
			<integer>0</integer>
			<key>useCount</key>
			<integer>9</integer>
			<key>uuidString</key>
			<string>94649DE4-6179-47BF-A7E5-19C754770981</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,kittyg</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-08-03T18:45:58Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Kitty Placeholder - Grey</string>
			<key>lastUsed</key>
			<date>2012-06-29T19:32:28Z</date>
			<key>modificationDate</key>
			<date>2011-03-01T01:12:44Z</date>
			<key>plainText</key>
			<string>&lt;img src="http://placekitten.com/g/%fill:width%/%fill:height%" alt="KITTEH %fill:width%x%fill:height%" width="%fill:width%" height="%fill:height%" /&gt;</string>
			<key>snippetType</key>
			<integer>0</integer>
			<key>useCount</key>
			<integer>15</integer>
			<key>uuidString</key>
			<string>7EAFF58C-EFB2-486C-9DE2-673BEBE85609</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,kittyc</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-08-03T18:45:58Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Kitty Placeholder - Color</string>
			<key>lastUsed</key>
			<date>2012-06-29T19:32:43Z</date>
			<key>modificationDate</key>
			<date>2011-03-01T01:12:49Z</date>
			<key>plainText</key>
			<string>&lt;img src="http://placekitten.com/%fill:width%/%fill:height%" alt="KITTEH %fill:width%x%fill:height%" width="%fill:width%" height="%fill:height%" /&gt;</string>
			<key>snippetType</key>
			<integer>0</integer>
			<key>useCount</key>
			<integer>14</integer>
			<key>uuidString</key>
			<string>21988792-3AAB-48BF-ACDB-5E2F3EB09D5C</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,encemail</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-05-08T00:57:58Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Encode email address</string>
			<key>lastUsed</key>
			<date>2012-08-09T12:00:18Z</date>
			<key>modificationDate</key>
			<date>2012-04-21T13:33:33Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env ruby -wKU

clipboard = %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip
print "mailto:#{$2.gsub(/./) {sprintf("&amp;#x%02X;", $&amp;.unpack("U")[0])}}" if clipboard =~ /\A(mailto:)?(.*?@.*\..*)\z/</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>4</integer>
			<key>uuidString</key>
			<string>7E73E84C-00D9-4026-ABEB-3BEE7501ABC6</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,href</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2009-10-28T10:50:26Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Clipboard HTML Link</string>
			<key>lastUsed</key>
			<date>2012-08-29T09:38:33Z</date>
			<key>modificationDate</key>
			<date>2010-05-05T20:04:04Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env ruby -wKU

def entity_escape(text)
  text.gsub(/&amp;(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)/, '&amp;amp;')
end

def make_link(text)
  case text
  when %r{\A(mailto:)?(.*?@.*\..*)\z}:
    "mailto:#{$2.gsub(/./) {sprintf("&amp;#x%02X;", $&amp;.unpack("U")[0])}}"
  when %r{\Ahttps?://.*?\.\w{2,4}.*?\z}:
    entity_escape(text)
  when %r{\A(www\..*|.*\.\w{2,4})\z}:
    "http://#{entity_escape text}"
  when %r{\A.*?\.\w{2,4}\/?.*\z}:
    "http://#{entity_escape text}"
  else
    nil
  end
end

url = make_link %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip
print %Q{&lt;a href="#{url}"&gt;%fill:Link Text%&lt;/a&gt;}</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>31</integer>
			<key>uuidString</key>
			<string>84734C3C-2BD8-46F6-AC92-19800205D1F1</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,jq</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-11-10T09:03:04Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>jQuery Wrapper</string>
			<key>lastUsed</key>
			<date>2012-07-03T02:54:00Z</date>
			<key>modificationDate</key>
			<date>2010-11-10T09:03:44Z</date>
			<key>plainText</key>
			<string>(function($){%|})(jQuery);</string>
			<key>snippetType</key>
			<integer>0</integer>
			<key>useCount</key>
			<integer>64</integer>
			<key>uuidString</key>
			<string>191900F2-5F76-4E6D-A14E-C33F871BC216</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,mdr</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-05-08T00:39:31Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Paste Markdown References</string>
			<key>lastUsed</key>
			<date>2012-06-29T18:55:08Z</date>
			<key>modificationDate</key>
			<date>2012-06-29T18:53:37Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/ruby

# Parses the clipboard for urls
# if it finds 1 or more, paste them as a list of markdown references
# if the links in the clipboard are already in markdown reference format,
# it preserves their names and sorts the references

clipboard = %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip
links = clipboard.scan /(?:\[([^\]]+)\]\: )?(https?:\/\/[^ \n\r"]+)/m

norepeat = []
output = []
exit if links.nil?

links.each {|url|
  fresh = true
  output.each {|a|
    fresh = false if a['link'] == url[1]
  }
  next unless fresh

	if url[0].nil?
		domain = url[1].match(/https?:\/\/([^\/]+)/)
		parts = domain[1].split('.')
		name = case parts.length
			when 1,2: parts[0]
			else parts[1]
		end
	else
		name = url[0]
	end

  name = "itunes" if url[1] =~ /(itunes|phobos).apple.com/

	while norepeat.include? name
		name = name =~ / ?[0-9]$/ ? name.next! : name = name + " 2"
	end
	output &lt;&lt; {'title' =&gt; name, 'link' =&gt; url[1] }
	norepeat.push name
}

output.sort {|a,b| a['title'] &lt;=&gt; b['title']}.each { |x| puts "[#{x['title']}]: #{x['link']}" }</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>5</integer>
			<key>uuidString</key>
			<string>80CA807F-B65D-4B35-A7DD-DECD18D2877C</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,mlink</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-03-13T14:09:14Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Markdown Link</string>
			<key>lastUsed</key>
			<date>2012-06-29T18:56:13Z</date>
			<key>modificationDate</key>
			<date>2011-02-17T16:17:37Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env ruby -wKU

def entity_escape(text)
  text.gsub(/&amp;(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)/, '&amp;amp;')
end

def make_link(text)
  case text
  when %r{\A(mailto:)?(.*?@.*\..*)\z}:
    "mailto:#{$2.gsub(/./) {sprintf("&amp;#x%02X;", $&amp;.unpack("U")[0])}}"
  when %r{\Ahttps?://.*?\.\w{2,4}.*?\z}:
    entity_escape(text)
  when %r{\A(www\..*|.*\.\w{2,4})\z}:
    "http://#{entity_escape text}"
  when %r{\A.*?\.\w{2,4}\/?.*\z}:
    "http://#{entity_escape text}"
  else
    nil
  end
end

url = make_link %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip
print %Q{[%fill:Link Text%](#{url})}</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>24</integer>
			<key>uuidString</key>
			<string>3A7287E0-3633-4D41-9C8B-E23782573EB3</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,sub</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-04-29T18:35:28Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Shorten clipboard (bit.ly)</string>
			<key>lastUsed</key>
			<date>2012-08-09T11:56:31Z</date>
			<key>modificationDate</key>
			<date>2012-06-29T19:28:05Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/ruby
# Bit.ly shortener TextExpander Snippet by Brett Terpstra
# Working as of June, 2012 but APIs are a'changin
# Create snippets for username (shortcut: #btlyu) and API key (shortcut: #btlya)
# Find your API key at http://bit.ly/a/your_api_key

require 'open-uri'
require 'cgi'

def entity_escape(text)
  text.gsub(/&amp;(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)/, '&amp;amp;')
end

def make_link(text)
  case text
  when %r{\Ahttps?://.*?\.\w{2,4}.*?\z}:
    entity_escape(text)
  when %r{\A(www\..*|.*\.\w{2,4})\z}:
    "http://#{entity_escape text}"
  when %r{\A.*?\.\w{2,4}\/?.*\z}:
    "http://#{entity_escape text}"
  else
    nil
  end
end

USER_NAME = '%snippet:#btlyu%' # Your login name
API_KEY = '%snippet:#btlya%'
url = make_link %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip

res = open("http://api.bit.ly/v3/shorten?login=#{USER_NAME}&amp;apiKey=#{API_KEY}&amp;longUrl=#{CGI.escape(url)}&amp;format=txt").read unless url.nil?

begin
  print res unless res.nil?
rescue
  exit
end</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>27</integer>
			<key>uuidString</key>
			<string>72C29BCD-DFB1-4DBE-BCD6-84CB08B468B3</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,sui</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-04-29T18:35:28Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Shorten clipboard (is.gd)</string>
			<key>lastUsed</key>
			<date>2012-06-29T19:00:44Z</date>
			<key>modificationDate</key>
			<date>2012-06-29T19:29:56Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/ruby
# is.gd shortener TextExpander Snippet by Brett Terpstra
# Working as of June, 2012 but APIs are a'changin

require 'open-uri'
require 'cgi'

def entity_escape(text)
  text.gsub(/&amp;(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)/, '&amp;amp;')
end

def make_link(text)
  case text
  when %r{\Ahttps?://.*?\.\w{2,4}.*?\z}:
    entity_escape(text)
  when %r{\A(www\..*|.*\.\w{2,4})\z}:
    "http://#{entity_escape text}"
  when %r{\A.*?\.\w{2,4}\/?.*\z}:
    "http://#{entity_escape text}"
  else
    nil
  end
end

url = make_link %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip
print open("http://is.gd/api.php?longurl=#{CGI.escape(url)}").read unless url.nil?</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>20</integer>
			<key>uuidString</key>
			<string>5F3684EB-67CD-4B27-A163-AC741F61E233</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,sut</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-04-29T18:35:28Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Shorten clipboard (tinyurl)</string>
			<key>lastUsed</key>
			<date>2012-08-29T09:41:11Z</date>
			<key>modificationDate</key>
			<date>2012-06-29T19:29:52Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/ruby
# tinyurl shortener TextExpander Snippet by Brett Terpstra
# Working as of June, 2012 but APIs are a'changin

require 'open-uri'
require 'cgi'

def entity_escape(text)
  text.gsub(/&amp;(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)/, '&amp;amp;')
end

def make_link(text)
  case text
  when %r{\Ahttps?://.*?\.\w{2,4}.*?\z}:
    entity_escape(text)
  when %r{\A(www\..*|.*\.\w{2,4})\z}:
    "http://#{entity_escape text}"
  when %r{\A.*?\.\w{2,4}\/?.*\z}:
    "http://#{entity_escape text}"
  else
    nil
  end
end

url = make_link %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip

print open("http://tinyurl.com/api-create.php?url=#{CGI.escape(url)}").read unless url.nil?</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>40</integer>
			<key>uuidString</key>
			<string>8CFE525D-9EB6-416C-A57F-0ADC7294DA7C</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,url</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2009-10-28T10:54:02Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Make URL</string>
			<key>lastUsed</key>
			<date>2012-06-29T19:30:11Z</date>
			<key>modificationDate</key>
			<date>2011-04-23T09:06:57Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env ruby -wKU

def entity_escape(text)
  text.gsub(/&amp;(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)/, '&amp;amp;')
end

def make_link(text)
  case text
  when %r{\A(mailto:)?(.*?@.*\..*)\z}:
    "mailto:#{$2}"
  when %r{\Ahttps?://.*?\.\w{2,4}.*?\z}:
    entity_escape(text)
  when %r{\A(www\..*|.*\.\w{2,4})\z}:
    "http://#{entity_escape text}"
  when %r{\A.*?\.\w{2,4}\/?.*\z}:
    "http://#{entity_escape text}"
  else
    nil
  end
end

url = make_link %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip
print url unless url.nil?</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>31</integer>
			<key>uuidString</key>
			<string>96E03344-7EEE-43B1-9744-9BD8D8EF64AE</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>#!b</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-04-26T12:40:27Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Hashbang, Bash</string>
			<key>lastUsed</key>
			<date>2012-08-09T11:59:39Z</date>
			<key>modificationDate</key>
			<date>2011-09-02T04:49:35Z</date>
			<key>plainText</key>
			<string>#!/bin/bash</string>
			<key>snippetType</key>
			<integer>0</integer>
			<key>useCount</key>
			<integer>3</integer>
			<key>uuidString</key>
			<string>A6710731-67C3-46ED-945E-793BB1028401</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>#!o</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-04-26T12:41:23Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Hashbang, osascript</string>
			<key>modificationDate</key>
			<date>2010-05-08T01:02:40Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env osascript</string>
			<key>snippetType</key>
			<integer>0</integer>
			<key>useCount</key>
			<integer>0</integer>
			<key>uuidString</key>
			<string>4E7C2772-9024-4C08-A72C-12B09A5C70DF</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>#!r</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-03-13T14:10:51Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Hashbang, Ruby</string>
			<key>lastUsed</key>
			<date>2012-08-09T12:16:43Z</date>
			<key>modificationDate</key>
			<date>2012-06-29T19:30:34Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/ruby</string>
			<key>snippetType</key>
			<integer>0</integer>
			<key>useCount</key>
			<integer>10</integer>
			<key>uuidString</key>
			<string>CA93BD8E-E159-446F-99C5-917BE72429A8</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,linkme</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2011-06-24T17:31:56Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Link reminder</string>
			<key>lastUsed</key>
			<date>2011-06-24T17:32:54Z</date>
			<key>modificationDate</key>
			<date>2011-09-02T04:01:52Z</date>
			<key>plainText</key>
			<string>(///LINK///)</string>
			<key>snippetType</key>
			<integer>0</integer>
			<key>useCount</key>
			<integer>2</integer>
			<key>uuidString</key>
			<string>4009D494-6194-44EC-8F9A-FAC4A3EC29BB</string>
		</dict>
	</array>
</dict>
</plist>
